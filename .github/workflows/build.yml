
name: Build

on:
  push:
    # Always build when there are new commits
    branches:
      - '**'
    # Always build when there are new tagged commits
    tags:
      - '**'

    # # Always build when there are new commits to master
    # branches:
    #   - master
    # # Always build release-tags
    # tags:
    #   - 'releases/**'

    # Always build pull requests
  pull_request:
    branches:
      - '**'

  repository_dispatch:

    # build-nightly will trigger a build of nightly on master
    #
    # Syntax for invoking this trigger:
    #
    # USERNAME=<name> \
    # PERSONAL_ACCESS_TOKEN=<token> \
    # ORGANIZATION=<org> \
    # REPOSITORY=<repo> \
    # bash -c 'curl -XPOST -u $USERNAME:$PERSONAL_ACCESS_TOKEN \
    #    -H "Accept: application/vnd.github.everest-preview+json" \
    #    -H "Content-Type: application/json" \
    #    "https://api.github.com/repos/$ORGANIZATION/$REPOSITORY/dispatches" \
    #    --data "{\"event_type\" : \"build-nightly\" }"'
    #
    types: [build-nightly]

#
# The build jobs are organized into two phases:
#
# Build:
#   extract-changelog     - extracts changelog info from history.txt and formats the result as Markdown
#   build-linux-deb       - builds a .deb package for Ubuntu
#   build-linux-linuxbrew - verifies that the application could be packaged for Linuxbrew (for Linux)
#   build-windows         - builds a set of binaries and an MSI archive for Windows
#   build-macosx-homebrew - verifies that the application would work when packaged for Homebrew (for MacOSX)
#
# Publish:
#   publish-github    - Create a Release in the vlink repo and upload artifacts (.deb packge, Windows binaries, .MSI)
#   publish-apt       - Trigger an update to the apt repo with a new .deb package
#   publish-homebrew  - Update the Homebrew (MacOSX) tap with a new formula for vlink
#
# The Build phase always runs.
# The Publish phase only runs when a release has been triggered.

jobs:
  capture-global-environment-variables:
    name: Capture shared environment variables
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: Capture environment variables
        run: |
          ./linux/scripts/create-global-environment-variables-script.sh build_results "${GITHUB_REF}" "${{ github.repository }}" "${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/') }}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: global-environment-variables
          path: build_results

  extract-changelog:
    name: Extract changelog
    needs: [capture-global-environment-variables]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: chmod ugo+x ./global-environment-variables/global-environment-variables.sh && ./global-environment-variables/global-environment-variables.sh
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Download source
        run: BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make clean download
      - name: Extract changelog
        run: make extract-changelog
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: changelog-artifacts
          path: build_results

  build-linux-deb:
    name: Build for Linux - .deb package
    needs: [capture-global-environment-variables]
    runs-on: ubuntu-16.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: chmod ugo+x ./global-environment-variables/global-environment-variables.sh && ./global-environment-variables/global-environment-variables.sh
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get -y install debhelper devscripts libevent-dev
      - name: Build executables
        run: DISTRIBUTION=xenial BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make clean download build
      - name: Create .deb package
        run: DISTRIBUTION=xenial BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make package-deb
      - name: Test .deb package
        run: DISTRIBUTION=xenial BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make test-deb
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: linux-deb-artifacts
          path: build_results

  build-linux-linuxbrew:
    name: Build for Linux - Linuxbrew formula
    needs: [capture-global-environment-variables]
    runs-on: ubuntu-16.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: chmod ugo+x ./global-environment-variables/global-environment-variables.sh && ./global-environment-variables/global-environment-variables.sh
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get -y install jq
          source ./linux/scripts/install-linuxbrew.sh
          echo "::set-env name=HOMEBREW_PREFIX::${HOMEBREW_PREFIX}"
          echo "::set-env name=HOMEBREW_CELLAR::${HOMEBREW_CELLAR}"
          echo "::set-env name=HOMEBREW_REPOSITORY::${HOMEBREW_REPOSITORY}"
          echo "::add-path::${HOMEBREW_PREFIX}/bin"
          echo "::add-path::${HOMEBREW_PREFIX}/sbin"
          brew tap ${{ steps.global_env.outputs.SOURCE_ORGANIZATION }}/prebuilt-amiga-dev-tools
          # Hack: change permissions for library from 666 to 644 since the umask is not honored
          #  yet 'brew audit' requires 644 for the formula file on Linux
          # We change permissions for all taps, since brew will lowercase org folder names, so
          #  ...SOURCE_ORGANIZATION is not necessarily a valid folder name
          chmod -R go-w /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps
      - name: Update homebrew formula locally
        run: BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make update-homebrew-formula-locally
      - name: Test homebrew formula
        run: BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make test-homebrew-formula

  build-windows:
    name: Build for Windows
    needs: [capture-global-environment-variables]
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: .\global-environment-variables\global-environment-variables.ps1
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Build executables
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          if ((Start-Process nmake.exe -ArgumentList BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }},clean,download,build -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Create packages
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          .\windows\scripts\set-wix-path.ps1
          if ((Start-Process nmake.exe -ArgumentList BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }},package -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Test packages
        shell: powershell
        run: |
          .\windows\scripts\set-msvc-path.ps1
          if ((Start-Process nmake.exe -ArgumentList BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }},test-packages -NoNewWindow -Wait -PassThru).ExitCode) { throw }
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows-artifacts
          path: build_results

  build-macosx-homebrew:
    name: Build for MacOSX - Homebrew formula
    needs: [capture-global-environment-variables]
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: .\global-environment-variables\global-environment-variables.ps1
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Install prerequisites
        run: |
          brew install jq
          brew tap ${{ steps.global_env.outputs.SOURCE_ORGANIZATION }}/prebuilt-amiga-dev-tools
      - name: Update homebrew formula locally
        run: BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make update-homebrew-formula-locally
      - name: Test homebrew formula
        run: BUILD_TYPE=${{ steps.global_env.outputs.BUILD_TYPE }} make test-homebrew-formula

  publish-github:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/'))
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [extract-changelog, build-linux-deb, build-linux-linuxbrew, build-windows, build-macosx-homebrew]
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: .\global-environment-variables\global-environment-variables.ps1
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get -y install jq
      - name: Download changelog-artifacts
        uses: actions/download-artifact@v1
        with:
          name: changelog-artifacts
      - name: Download linux-deb-artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-deb-artifacts
      - name: Download windows-artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows-artifacts
      - name: Create GitHub release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.global_env.outputs.SOURCE_VERSION }}
          draft: false
          bodyFile: changelog-artifacts/changelog-for-version.md
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "linux-deb-artifacts/vlink_${{ steps.global_env.outputs.SOURCE_VERSION }}_amd64.xenial.deb,windows-artifacts/vlink-${{ steps.global_env.outputs.SOURCE_VERSION }}-windows-binaries.zip,windows-artifacts/vlink-${{ steps.global_env.outputs.SOURCE_VERSION }}-windows-installer.msi"
          # # Disabled publishing of Chocolatey package for now.
          # # The file name is not based on VLINK_VERSION but on VLINK_PACKAGE_VERSION
          # #   and thus we need logic to translate SOURCE_VERSION from the former to the latter format to make this step work.
          # # Filename: 
          # # windows-binaries/vlink.${{ steps.global_env.outputs.SOURCE_VERSION }}.nupkg

  publish-apt:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/'))
    name: Publish to Apt
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [extract-changelog, build-linux-deb, build-linux-linuxbrew, build-windows, build-macosx-homebrew, publish-github]
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: .\global-environment-variables\global-environment-variables.ps1
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Download linux-deb-artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-deb-artifacts
      - name: Publish Linux deb package to Apt repository
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.APT_REPO__REPOSITORY_DISPATCH__TOKEN }}
          repository: ${{ steps.global_env.outputs.SOURCE_ORGANIZATION }}/apt-prebuilt-amiga-dev-tools
          event-type: add-deb-package
          client-payload: '{ "download_url": "https://github.com/${{ steps.global_env.outputs.SOURCE_ORGANIZATION }}/vlink/releases/download/releases%2F${{ steps.global_env.outputs.SOURCE_VERSION }}/vlink_${{ steps.global_env.outputs.SOURCE_VERSION }}_amd64.xenial.deb", "distribution": "xenial" }'

  publish-homebrew:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/'))
    name: Publish to Homebrew tap
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [extract-changelog, build-linux-deb, build-linux-linuxbrew, build-windows, build-macosx-homebrew, publish-github]
    steps:
      - uses: actions/checkout@v1
      - name: Download global environment variables artifacts
        uses: actions/download-artifact@v1
        with:
          name: global-environment-variables
      - name: Apply global environment variables to current job
        id: global_env
        run: .\global-environment-variables\global-environment-variables.ps1
        # These can be accessed as ${{ steps.global_env.outputs.SOURCE_NAME }} etc in subsequent steps
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get -y install jq
          source ./linux/scripts/install-linuxbrew.sh
          echo "::set-env name=HOMEBREW_PREFIX::${HOMEBREW_PREFIX}"
          echo "::set-env name=HOMEBREW_CELLAR::${HOMEBREW_CELLAR}"
          echo "::set-env name=HOMEBREW_REPOSITORY::${HOMEBREW_REPOSITORY}"
          echo "::add-path::${HOMEBREW_PREFIX}/bin"
          echo "::add-path::${HOMEBREW_PREFIX}/sbin"
          brew tap ${{ steps.global_env.outputs.SOURCE_ORGANIZATION }}/prebuilt-amiga-dev-tools
          # Hack: change permissions for library from 666 to 644 since the umask is not honored
          #  yet 'brew audit' requires 644 for the formula file on Linux
          # We change permissions for all taps, since brew will lowercase org folder names, so
          #  ...SOURCE_ORGANIZATION is not necessarily a valid folder name
          chmod -R go-w /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps
      - name: Send PR with updated Homebrew formula to Homebrew tap repository
        run: |
          # Use hardcoded credentials for commits
          git config --global user.email "unknown@example.com"
          git config --global user.name "Release job for vlink"

          # Use an account token when performing Git operations against server
          # The account token will allow pushes, branch creation etc
          git config --global credential.helper store
          echo "https://${{ secrets.HOMEBREW_REPO__FORK_AND_UPDATE__TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

          # Use an account token instead of a repo-local token for brew's API operations
          # The account token will allow forking etc
          HOMEBREW_GITHUB_API_TOKEN=${{ secrets.HOMEBREW_REPO__FORK_AND_UPDATE__TOKEN }} make update-homebrew-formula-and-create-pr
